import java.util.ArrayList;
import java.util.List;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    // 菜单
    private ItemRepository itemRepository;
    // 促销菜单
    private SalesPromotionRepository salesPromotionRepository;

    public App(ItemRepository itemRepository, SalesPromotionRepository salesPromotionRepository) {
        this.itemRepository = itemRepository;
        this.salesPromotionRepository = salesPromotionRepository;
    }

    /*
    * 只有两种优惠： 满30-6 和 特定菜品半价优惠
    * 1. 先保存订单中的菜品信息，并计算订单的总金额
    * 2. 计算过程中，并判断当前订单中的菜品是否是特定的菜品，是则减去菜品半价并保存
    * 3. 最后判断是否能够享受到优惠
    *   可以时，则判断哪个活动更加优惠
    * */
    public String bestCharge(List<String> inputs) {
        //TODO: write code here
        double firstPromotion = 0.0;    // 满30-6活动时的金额
        double secondPromotion = 0.0;   // 特定菜品半价的总金额
        double save = 0.0;              // 半价优惠中剩下的钱

        // 保存订单中的菜品对象和数量
        Item[] orderItems = new Item[inputs.size()];
        int[] itemNum = new int[orderItems.length];
        int index = -1;
        // 保存订单中有半价优惠的菜品
        List<String> list = new ArrayList<>();

        // 获取所有的商品
        List<Item> items = itemRepository.findAll();
        // 获取所有的促销活动
        List<SalesPromotion> promotions = salesPromotionRepository.findAll();
        SalesPromotion halfPricePromotion = null;   //特定菜品半价
        String[] strs = null;
        Item item = null;
        // 获取特定菜品半价优惠的促销对象
        for(SalesPromotion promotion : promotions){
            if(promotion.getType().equals("50%_DISCOUNT_ON_SPECIFIED_ITEMS")){
                halfPricePromotion = promotion;
                break;
            }
        }
        // 获取半价优惠的菜品列表
        List<String> halfPriceItems = halfPricePromotion.getRelatedItems();

        for(String input : inputs){
            strs = input.split("x");
            String id = strs[0].trim();
            Integer num = Integer.valueOf(strs[1].trim());
            // 保存菜品的所有原价和
           for(Item temp : items){
               if(temp.getId().equals(id)){
                   index ++;
                   orderItems[index] = temp;
                   itemNum[index] = num;

                   firstPromotion += temp.getPrice() * num;
                   secondPromotion += temp.getPrice() * num;
                   item = temp;
                   break;
               }
           }
           // 查看当前订单的菜品是否包含在半价优惠活动
            if(halfPriceItems.contains(item.getId())){
                save += item.getPrice() * num  / 2;
                // 如果包含的话，则减去该菜品的一半价格
                secondPromotion -= item.getPrice() * num  / 2;
                list.add(item.getName());
            }
        }
        StringBuilder sb = new StringBuilder();


        sb.append("============= 订餐明细 =============\n");
        for(int i = 0; i <= index; i++){
            sb.append(String.format("%s x %d = %d元\n",orderItems[i].getName(),itemNum[i],(int)orderItems[i].getPrice() * itemNum[i]));
        }
        sb.append("-----------------------------------\n");
        // 通过判断save变量是否为0，可以得知是否有享受到特定菜品的半价优惠活动，判断金额是否大于30元，可以得知是否能够享受到满30-6活动
        if(save == 0 && firstPromotion < 30){
            sb.append(String.format("总计：%d元\n",(int)firstPromotion));
            sb.append("===================================");
            return new String(sb);
        }
        sb.append("使用优惠:\n");
        // 判断哪种优惠更加实惠
        firstPromotion -= 6;
        if(firstPromotion <= secondPromotion){
            // 使用满30-6的
            sb.append("满30减6元，省6元\n");
            sb.append("-----------------------------------\n");
            sb.append(String.format("总计：%d元\n",(int)firstPromotion));
        }else{
            // 使用半价的优惠
            sb.append(String.format("指定菜品半价(%s)，省%d元\n",String.join("，",list),(int)save));
            sb.append("-----------------------------------\n");
            sb.append(String.format("总计：%d元\n",(int)secondPromotion));
        }
        sb.append("===================================");
        return new String(sb);
    }
}
